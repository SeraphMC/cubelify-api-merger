name: Build and Release

on: [push]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        goos: [linux, windows, darwin]
        goarch: [amd64]

    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '>=1.23'

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get dependencies
        run: go get -v ./...

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -v -o ${{ runner.os }}-${{ matrix.goos }}-${{ matrix.goarch }}/${{ github.name }} ./...
          mkdir dist
          if ($env:RUNNER_OS -eq "Windows") {
            7z a -r "dist/${{ github.name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip" "windows-latest"
          } else {
            tar -czvf "dist/${{ github.name }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz" "${{ runner.os }}"
          }
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload binaries to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/*
          asset_name: ${{ github.name }}-${{ matrix.os }}-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.extension }}
          asset_content_type: application/octet-stream
